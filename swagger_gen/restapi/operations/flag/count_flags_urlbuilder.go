// Code generated by go-swagger; DO NOT EDIT.

package flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// CountFlagsURL generates an URL for the count flags operation
type CountFlagsURL struct {
	Deleted         *bool
	Description     *string
	DescriptionLike *string
	Enabled         *bool
	IncludeDeleted  *bool
	Key             *string
	Tags            *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *CountFlagsURL) WithBasePath(bp string) *CountFlagsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *CountFlagsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *CountFlagsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/flags/count"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/v1"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var deletedQ string
	if o.Deleted != nil {
		deletedQ = swag.FormatBool(*o.Deleted)
	}
	if deletedQ != "" {
		qs.Set("deleted", deletedQ)
	}

	var descriptionQ string
	if o.Description != nil {
		descriptionQ = *o.Description
	}
	if descriptionQ != "" {
		qs.Set("description", descriptionQ)
	}

	var descriptionLikeQ string
	if o.DescriptionLike != nil {
		descriptionLikeQ = *o.DescriptionLike
	}
	if descriptionLikeQ != "" {
		qs.Set("description_like", descriptionLikeQ)
	}

	var enabledQ string
	if o.Enabled != nil {
		enabledQ = swag.FormatBool(*o.Enabled)
	}
	if enabledQ != "" {
		qs.Set("enabled", enabledQ)
	}

	var includeDeletedQ string
	if o.IncludeDeleted != nil {
		includeDeletedQ = swag.FormatBool(*o.IncludeDeleted)
	}
	if includeDeletedQ != "" {
		qs.Set("include_deleted", includeDeletedQ)
	}

	var keyQ string
	if o.Key != nil {
		keyQ = *o.Key
	}
	if keyQ != "" {
		qs.Set("key", keyQ)
	}

	var tagsQ string
	if o.Tags != nil {
		tagsQ = *o.Tags
	}
	if tagsQ != "" {
		qs.Set("tags", tagsQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *CountFlagsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *CountFlagsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *CountFlagsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on CountFlagsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on CountFlagsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *CountFlagsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
