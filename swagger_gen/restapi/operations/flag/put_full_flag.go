// Code generated by go-swagger; DO NOT EDIT.

package flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutFullFlagHandlerFunc turns a function with the right signature into a put full flag handler
type PutFullFlagHandlerFunc func(PutFullFlagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutFullFlagHandlerFunc) Handle(params PutFullFlagParams) middleware.Responder {
	return fn(params)
}

// PutFullFlagHandler interface for that can handle valid put full flag params
type PutFullFlagHandler interface {
	Handle(PutFullFlagParams) middleware.Responder
}

// NewPutFullFlag creates a new http.Handler for the put full flag operation
func NewPutFullFlag(ctx *middleware.Context, handler PutFullFlagHandler) *PutFullFlag {
	return &PutFullFlag{Context: ctx, Handler: handler}
}

/*
	PutFullFlag swagger:route PUT /flags/{flagID}/full flag putFullFlag

PutFullFlag put full flag API
*/
type PutFullFlag struct {
	Context *middleware.Context
	Handler PutFullFlagHandler
}

func (o *PutFullFlag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutFullFlagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
