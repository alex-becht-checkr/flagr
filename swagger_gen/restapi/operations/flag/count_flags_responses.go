// Code generated by go-swagger; DO NOT EDIT.

package flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openflagr/flagr/swagger_gen/models"
)

// CountFlagsOKCode is the HTTP code returned for type CountFlagsOK
const CountFlagsOKCode int = 200

/*
CountFlagsOK returns the count of active flags

swagger:response countFlagsOK
*/
type CountFlagsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Count `json:"body,omitempty"`
}

// NewCountFlagsOK creates CountFlagsOK with default headers values
func NewCountFlagsOK() *CountFlagsOK {

	return &CountFlagsOK{}
}

// WithPayload adds the payload to the count flags o k response
func (o *CountFlagsOK) WithPayload(payload *models.Count) *CountFlagsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the count flags o k response
func (o *CountFlagsOK) SetPayload(payload *models.Count) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CountFlagsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CountFlagsDefault generic error response

swagger:response countFlagsDefault
*/
type CountFlagsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCountFlagsDefault creates CountFlagsDefault with default headers values
func NewCountFlagsDefault(code int) *CountFlagsDefault {
	if code <= 0 {
		code = 500
	}

	return &CountFlagsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the count flags default response
func (o *CountFlagsDefault) WithStatusCode(code int) *CountFlagsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the count flags default response
func (o *CountFlagsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the count flags default response
func (o *CountFlagsDefault) WithPayload(payload *models.Error) *CountFlagsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the count flags default response
func (o *CountFlagsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CountFlagsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
